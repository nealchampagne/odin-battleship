(()=>{"use strict";var __webpack_modules__={877:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// ./src/ship.js\nconst Ship = (name) => {\n  // Determine ship size based on the provided ship name\n  const getSize = (name) => {\n    if (name === "carrier") return 5;\n    if (name === "battleship") return 4;\n    if (name === "cruiser") return 3;\n    if (name === "submarine") return 3;\n    if (name === "destroyer") return 2;\n  };\n\n  const size = getSize(name);\n\n  // Counter for number of hits the ship has taken\n  let hitCount = 0;\n\n  // Increment the ship\'s hit count on hit\n  const hit = () => {\n    hitCount++;\n  };\n\n  // Check if the ship is sunk based on number of hits taken\n  const isSunk = () => {\n    return hitCount === size ? [name, size] : false;\n  };\n\n  return { name, size, hit, isSunk };\n};\n\n;// ./src/gameboard.js\n\n\nconst Gameboard = () => {\n  const boardObjects = [];\n\n  // Set size of board grid\n  const gridSize = 9;\n\n  // Function to make sure a given range on the board is empty\n  const checkEmpty = (range, direction, x, y) => {\n    let isEmpty = true;\n\n    for (let i = 0; i < range; i++) {\n      boardObjects.forEach((obj) => {\n        obj.positionArray.forEach((element) => {\n          if (direction === "horizontal") {\n            if (JSON.stringify(element) === `[${x + i},${y}]`) {\n              isEmpty = false;\n            }\n          } else if (direction === "vertical") {\n            if (JSON.stringify(element) === `[${x},${y + i}]`) {\n              isEmpty = false;\n            }\n          }\n        });\n      });\n    }\n    return isEmpty;\n  };\n\n  // Place ships on the board\n  const placeShip = (name, direction, x, y) => {\n    // Create an array to hold all the squares the ship occupies\n    const positionArray = [];\n\n    // Create a ship of the given type\n    const ship = Ship(name);\n\n    // Throw an error if the space is occupied or if the ship goes off the board\n    if (!checkEmpty(ship.size, direction, x, y)) {\n      throw new Error("Cannot place ship in an occupied space");\n    } else {\n      if (direction === "horizontal") {\n        if (x + (ship.size - 1) > gridSize) {\n          throw new Error("Cannot place ship off the board");\n        } else {\n          for (let i = 0; i < ship.size; i++) {\n            positionArray.push([x + i, y]);\n          }\n        }\n      } else if (direction === "vertical") {\n        if (y + (ship.size - 1) > gridSize) {\n          throw new Error("Cannot place ship off the board");\n        } else {\n          for (let i = 0; i < ship.size; i++) {\n            positionArray.push([x, y + i]);\n          }\n        }\n      }\n\n      // Otherwise, add the new object to the board objects array\n      boardObjects.push({ positionArray, ship });\n\n      // Return the object containing the position array and the new ship\n      return { positionArray, ship };\n    }\n  };\n\n  // Handle logic when a board square is attacked\n  const receiveAttack = (visitedArray, x, y) => {\n    // Throw error if the square has already been visited\n    if (\n      visitedArray.some((element) => JSON.stringify(element) === `[${x},${y}]`)\n    ) {\n      throw new Error("Please choose an unvisited square");\n    }\n\n    // Otherwise if it\'s a hit, invoke hit method of ship and return true\n    let isHit = false;\n    boardObjects.forEach((obj) => {\n      if (\n        obj.positionArray.find(\n          (element) => JSON.stringify(element) === `[${x},${y}]`,\n        )\n      ) {\n        obj.ship.hit();\n        isHit = true;\n      }\n    });\n\n    // Add the square to the visited array\n    visitedArray.push([x, y]);\n\n    return isHit;\n  };\n\n  // Check if all the ships on the board are sunk\n  const checkAllSunk = () => {\n    let allSunk = true;\n    boardObjects.forEach((obj) => {\n      if (obj.ship.isSunk() === false) {\n        allSunk = false;\n      }\n    });\n    return allSunk;\n  };\n\n  return {\n    gridSize,\n    placeShip,\n    checkEmpty,\n    boardObjects,\n    receiveAttack,\n    checkAllSunk,\n  };\n};\n\n;// ./src/player.js\n\n\nconst Player = (name, array = []) => {\n  // Each player needs their own Gameboard object\n  const board = Gameboard();\n\n  // Invoke receiveAttack on the provided board\n  const attack = (playerBoard, x, y, visitedArray = array) => {\n    return playerBoard.receiveAttack(visitedArray, x, y);\n  };\n\n  // Some general housekeeping variables\n  let hunterMode = false;\n  let linearHunt = false;\n  let sunkLength = 0;\n\n  const hitArray = [];\n  let targetArray = [];\n\n  // Define parameters to filter out invalid shots\n  const filterParams = (arr, visitedArray) =>\n    arr[0] >= 0 &&\n    arr[0] <= board.gridSize &&\n    arr[1] >= 0 &&\n    arr[1] <= board.gridSize &&\n    !JSON.stringify(visitedArray).includes(`${JSON.stringify(arr)}`);\n\n  const getHunterMode = () => hunterMode;\n\n  // Generate random values for computerAttack **UPGRADE THIS LATER**\n  const getRandomValue = () => Math.floor(Math.random() * (board.gridSize + 1));\n\n  const computerAttack = (\n    playerBoard,\n    x = getRandomValue(),\n    y = getRandomValue(),\n    visitedArray = array,\n  ) => {\n    let isHit = false;\n\n    // During random search\n    if (hunterMode === false) {\n      // If the random space has been visited, reroll until a new space is found\n      while (\n        visitedArray.some(\n          (element) => JSON.stringify(element) === `[${x},${y}]`,\n        )\n      ) {\n        x = getRandomValue();\n        y = getRandomValue();\n      }\n\n      if (playerBoard.receiveAttack(visitedArray, x, y)) {\n        isHit = true;\n\n        playerBoard.boardObjects.forEach((obj) => {\n          if (\n            obj.positionArray.some(\n              (element) => JSON.stringify(element) === `[${x},${y}]`,\n            )\n          ) {\n            /** If the hit sinks the ship, do not activate hunter mode,\n             *  otherwise begin hunting logic */\n            if (obj.ship.isSunk()) {\n              console.log("Sunk em!");\n              hunterMode = false;\n            } else {\n              hunterMode = true;\n              linearHunt = true;\n\n              hitArray.push([x, y]);\n\n              const adjacencyArray = [\n                [x - 1, y],\n                [x + 1, y],\n                [x, y - 1],\n                [x, y + 1],\n              ].filter((arr) => {\n                return filterParams(arr, visitedArray);\n              });\n\n              adjacencyArray.forEach((element) => {\n                targetArray.push(element);\n              });\n              targetArray.sort();\n            }\n          }\n        });\n      }\n\n      /** Pass values back to for the DOM manipulating code to process */\n      return [isHit, x, y];\n    } else if (hunterMode === true) {\n      targetArray.sort();\n\n      if (targetArray.length === 0) {\n        linearHunt = false;\n\n        hitArray.forEach((arr) => {\n          const newTargets = [\n            [arr[0] - 1, arr[1]],\n            [arr[0] + 1, arr[1]],\n            [arr[0], arr[1] - 1],\n            [arr[0], arr[1] + 1],\n          ];\n          newTargets.forEach((arr) => targetArray.push(arr));\n        });\n      }\n\n      // Filter out any invalid targets in the array\n      targetArray = targetArray.filter((arr) => {\n        return filterParams(arr, visitedArray);\n      });\n\n      // Pick a target at random from the valid targets\n      let target = targetArray[Math.floor(Math.random() * targetArray.length)];\n\n      // Handle logic if the attack is a hit\n      if (playerBoard.receiveAttack(visitedArray, target[0], target[1])) {\n        isHit = true;\n\n        hitArray.push(target);\n\n        playerBoard.boardObjects.forEach((obj) => {\n          if (\n            obj.positionArray.some(\n              (element) =>\n                JSON.stringify(element) === `[${target[0]},${target[1]}]`,\n            )\n          ) {\n            // If the hit sinks the ship,deactivate hunter mode,\n            if (obj.ship.isSunk()) {\n              sunkLength += obj.ship.size;\n\n              if (sunkLength === hitArray.length) {\n                hunterMode = false;\n                linearHunt = false;\n                sunkLength = 0;\n                hitArray.length = 0;\n                targetArray.length = 0;\n              }\n            }\n          }\n        });\n\n        // If the hit doesn\'t turn off hunter mode, continue hunting logic\n        if (hunterMode === true) {\n          hitArray.sort();\n\n          if (linearHunt === true) {\n            targetArray.length = 0;\n            if (hitArray[0][0] === hitArray[1][0]) {\n              targetArray.push(\n                [hitArray[0][0], hitArray[0][1] - 1],\n                [hitArray[0][0], hitArray[hitArray.length - 1][1] + 1],\n              );\n            } else if (hitArray[0][1] === hitArray[0][1]) {\n              targetArray.push(\n                [hitArray[0][0] - 1, hitArray[0][1]],\n                [hitArray[hitArray.length - 1][0] + 1, hitArray[0][1]],\n              );\n            }\n          }\n\n          // Filter out any invalid targets\n          targetArray = targetArray.filter((arr) => {\n            return filterParams(arr, visitedArray);\n          });\n        }\n      } else {\n        // On a miss, remove that item from the target array\n        targetArray.splice(targetArray.indexOf(target), 1);\n      }\n\n      // Return whether it was a hit or not and location for styling purposes\n      return [isHit, target[0], target[1]];\n    }\n  };\n\n  return {\n    name,\n    get visitedArray() {\n      return array;\n    },\n    board,\n    attack,\n    hitArray,\n    targetArray,\n    computerAttack,\n    getHunterMode,\n  };\n};\n\n;// ./src/clearchildren.js\n// Simple helper module for clearing DOM children\nconst clearChildren = (node) => {\n  while (node.firstChild) {\n    node.removeChild(node.lastChild);\n  }\n};\n\n;// ./src/images/waves.jpg\nconst waves_namespaceObject = __webpack_require__.p + "e85960e2858fa22f448b.jpg";\n;// ./src/images/fiveship.png\nconst fiveship_namespaceObject = __webpack_require__.p + "e0a36e417f04c9b2cca0.png";\n;// ./src/images/fourship.png\nconst fourship_namespaceObject = __webpack_require__.p + "bcc7240150cebf498514.png";\n;// ./src/images/threeship.png\nconst threeship_namespaceObject = __webpack_require__.p + "c4eb544ac204affcc24c.png";\n;// ./src/images/twoship.png\nconst twoship_namespaceObject = __webpack_require__.p + "5f14861ce9434a7fd260.png";\n;// ./src/index.js\n\n\n\n\n\n\n\n\n\n\nconst homeLoad = () => {\n  /** Grab/create DOM elements */\n  const body = document.body;\n\n  const modalContainer = document.createElement("div");\n  const modeModal = document.createElement("div");\n  const modeMessage = document.createElement("div");\n  const modeButtonContainer = document.createElement("div");\n  const onePlayerButton = document.createElement("button");\n  const twoPlayerButton = document.createElement("button");\n\n  const header = document.createElement("div");\n  const headContainer = document.createElement("div");\n  const title = document.createElement("div");\n\n  const content = document.getElementById("content");\n  const main = document.createElement("div");\n\n  const nameContainer = document.createElement("div");\n  const leftName = document.createElement("div");\n  const rightName = document.createElement("div");\n\n  const boardContainer = document.createElement("div");\n  const leftShipTray = document.createElement("div");\n  const leftCarrierLabel = document.createElement("div");\n  const leftBattleshipLabel = document.createElement("div");\n  const leftCruiserLabel = document.createElement("div");\n  const leftSubmarineLabel = document.createElement("div");\n  const leftDestroyerLabel = document.createElement("div");\n  const leftBoard = document.createElement("div");\n  const rightBoard = document.createElement("div");\n  const rightShipTray = document.createElement("div");\n  const rightCarrierLabel = document.createElement("div");\n  const rightBattleshipLabel = document.createElement("div");\n  const rightCruiserLabel = document.createElement("div");\n  const rightSubmarineLabel = document.createElement("div");\n  const rightDestroyerLabel = document.createElement("div");\n\n  const helpText = document.createElement("div");\n\n  const interstitialModal = document.createElement("div");\n  const interstitialText = document.createElement("div");\n  const readyButton = document.createElement("button");\n\n  const errorModal = document.createElement("div");\n  const errorText = document.createElement("div");\n  const errorButton = document.createElement("button");\n\n  const endModal = document.createElement("div");\n  const endText = document.createElement("div");\n  const resetButton = document.createElement("button");\n\n  const footContainer = document.createElement("div");\n  const footer = document.createElement("div");\n\n  const wavesImage = new Image();\n  const leftCarrierImage = new Image();\n  const leftBattleshipImage = new Image();\n  const leftCruiserImage = new Image();\n  const leftSubmarineImage = new Image();\n  const leftDestroyerImage = new Image();\n  const rightCarrierImage = new Image();\n  const rightBattleshipImage = new Image();\n  const rightCruiserImage = new Image();\n  const rightSubmarineImage = new Image();\n  const rightDestroyerImage = new Image();\n\n  /** Assign image sources */\n  wavesImage.src = waves_namespaceObject;\n  leftCarrierImage.src = fiveship_namespaceObject;\n  leftBattleshipImage.src = fourship_namespaceObject;\n  leftCruiserImage.src = threeship_namespaceObject;\n  leftSubmarineImage.src = threeship_namespaceObject;\n  leftDestroyerImage.src = twoship_namespaceObject;\n  rightCarrierImage.src = fiveship_namespaceObject;\n  rightBattleshipImage.src = fourship_namespaceObject;\n  rightCruiserImage.src = threeship_namespaceObject;\n  rightSubmarineImage.src = threeship_namespaceObject;\n  rightDestroyerImage.src = twoship_namespaceObject;\n\n  /** Add CSS selectors */\n  modalContainer.classList.add("modalcontainer");\n  modeModal.classList.add("modal");\n  modeMessage.classList.add("modemessage");\n  modeButtonContainer.classList.add("modebtncontainer");\n\n  header.classList.add("header");\n  headContainer.classList.add("headcontainer");\n  title.classList.add("title");\n\n  main.classList.add("main");\n  nameContainer.classList.add("namecontainer");\n  leftName.classList.add("name");\n  rightName.classList.add("name");\n\n  boardContainer.classList.add("boardcontainer");\n  leftBoard.classList.add("board");\n  rightBoard.classList.add("board");\n\n  leftShipTray.classList.add("shiptray");\n  leftCarrierImage.classList.add("shipimage");\n  leftBattleshipImage.classList.add("shipimage");\n  leftCruiserImage.classList.add("shipimage");\n  leftSubmarineImage.classList.add("shipimage");\n  leftDestroyerImage.classList.add("shipimage");\n  leftCarrierLabel.classList.add("shiplabel");\n  leftBattleshipLabel.classList.add("shiplabel");\n  leftCruiserLabel.classList.add("shiplabel");\n  leftSubmarineLabel.classList.add("shiplabel");\n  leftDestroyerLabel.classList.add("shiplabel");\n\n  rightShipTray.classList.add("shiptray");\n  rightCarrierImage.classList.add("shipimage");\n  rightBattleshipImage.classList.add("shipimage");\n  rightCruiserImage.classList.add("shipimage");\n  rightSubmarineImage.classList.add("shipimage");\n  rightDestroyerImage.classList.add("shipimage");\n  rightCarrierLabel.classList.add("shiplabel");\n  rightBattleshipLabel.classList.add("shiplabel");\n  rightCruiserLabel.classList.add("shiplabel");\n  rightSubmarineLabel.classList.add("shiplabel");\n  rightDestroyerLabel.classList.add("shiplabel");\n\n  helpText.classList.add("helptext");\n\n  interstitialModal.classList.add("modal");\n  interstitialText.classList.add("intertext");\n\n  errorModal.classList.add("modal", "error");\n  errorText.classList.add("errortext");\n  errorButton.classList.add("errorbtn");\n\n  endModal.classList.add("modal");\n  endText.classList.add("endtext");\n\n  footContainer.classList.add("footcontainer");\n  footer.classList.add("footer");\n\n  /** Populate text content */\n  title.textContent = "Battleship";\n  leftCarrierLabel.textContent = "Carrier";\n  leftBattleshipLabel.textContent = "Battleship";\n  leftCruiserLabel.textContent = "Cruiser";\n  leftSubmarineLabel.textContent = "Submarine";\n  leftDestroyerLabel.textContent = "Destroyer";\n  rightCarrierLabel.textContent = "Carrier";\n  rightBattleshipLabel.textContent = "Battleship";\n  rightCruiserLabel.textContent = "Cruiser";\n  rightSubmarineLabel.textContent = "Submarine";\n  rightDestroyerLabel.textContent = "Destroyer";\n\n  modeMessage.textContent = "Select game mode:";\n  onePlayerButton.textContent = "One Player";\n  twoPlayerButton.textContent = "Two Player";\n\n  readyButton.textContent = "Ready";\n\n  footer.textContent = "By Neal Champagne: October 2024";\n\n  interstitialModal.style.display = "none";\n  readyButton.addEventListener("click", () => closeInterstitial(playerTurn));\n\n  errorModal.style.display = "none";\n  errorButton.textContent = "Close";\n  errorButton.addEventListener("click", () => {\n    errorModal.style.display = "none";\n  });\n\n  endModal.style.display = "none";\n  resetButton.textContent = "New Game";\n  resetButton.addEventListener("click", () => homeLoad());\n  /** Set background images for boards and main body */\n  leftBoard.style.backgroundImage = `url(${waves_namespaceObject})`;\n  leftBoard.style.backgroundSize = "cover";\n  rightBoard.style.backgroundImage = `url(${waves_namespaceObject})`;\n  rightBoard.style.backgroundSize = "cover";\n  body.style.backgroundImage = `url(${waves_namespaceObject})`;\n  body.style.backgroundSize = "cover";\n\n  /** Wipe the slate clean for resets */\n  clearChildren(content);\n\n  main.appendChild(modalContainer);\n  modalContainer.appendChild(modeModal);\n  modeModal.appendChild(modeMessage);\n  modeModal.appendChild(modeButtonContainer);\n  modeButtonContainer.appendChild(onePlayerButton);\n  modeButtonContainer.appendChild(twoPlayerButton);\n\n  content.appendChild(header);\n  header.appendChild(headContainer);\n  headContainer.appendChild(title);\n\n  content.appendChild(main);\n  main.appendChild(nameContainer);\n  nameContainer.appendChild(leftName);\n  nameContainer.appendChild(rightName);\n\n  main.appendChild(boardContainer);\n  boardContainer.appendChild(leftShipTray);\n  leftShipTray.appendChild(leftCarrierLabel);\n  leftShipTray.appendChild(leftCarrierImage);\n  leftShipTray.appendChild(leftBattleshipLabel);\n  leftShipTray.appendChild(leftBattleshipImage);\n  leftShipTray.appendChild(leftCruiserLabel);\n  leftShipTray.appendChild(leftCruiserImage);\n  leftShipTray.appendChild(leftSubmarineLabel);\n  leftShipTray.appendChild(leftSubmarineImage);\n  leftShipTray.appendChild(leftDestroyerLabel);\n  leftShipTray.appendChild(leftDestroyerImage);\n\n  boardContainer.appendChild(leftBoard);\n  boardContainer.appendChild(rightBoard);\n\n  boardContainer.appendChild(rightShipTray);\n  rightShipTray.appendChild(rightCarrierLabel);\n  rightShipTray.appendChild(rightCarrierImage);\n  rightShipTray.appendChild(rightBattleshipLabel);\n  rightShipTray.appendChild(rightBattleshipImage);\n  rightShipTray.appendChild(rightCruiserLabel);\n  rightShipTray.appendChild(rightCruiserImage);\n  rightShipTray.appendChild(rightSubmarineLabel);\n  rightShipTray.appendChild(rightSubmarineImage);\n  rightShipTray.appendChild(rightDestroyerLabel);\n  rightShipTray.appendChild(rightDestroyerImage);\n\n  main.appendChild(helpText);\n\n  modalContainer.appendChild(interstitialModal);\n  interstitialModal.appendChild(interstitialText);\n  interstitialModal.appendChild(readyButton);\n\n  modalContainer.appendChild(errorModal);\n  errorModal.appendChild(errorText);\n  errorModal.appendChild(errorButton);\n\n  modalContainer.appendChild(endModal);\n  endModal.appendChild(endText);\n  endModal.appendChild(resetButton);\n\n  content.appendChild(footContainer);\n  footContainer.appendChild(footer);\n\n  /** Initialize necessary variables and arrays */\n  let pvpMode = false;\n  let setupPhase = false;\n  let battlePhase = false;\n\n  let player1;\n  let player2;\n\n  let placeCarrier = false;\n  let placeBattleship = false;\n  let placeCruiser = false;\n  let placeSubmarine = false;\n  let placeDestroyer = false;\n\n  let placeDirection = "horizontal";\n  let hoverTarget;\n\n  const playerOneSquares = [];\n  const playerTwoSquares = [];\n  const visitedArray1 = [];\n  const visitedArray2 = [];\n\n  let playerTurn = "player1";\n\n  /** Close mode-select modal and begin setup */\n  const closeModeModal = () => {\n    if (pvpMode) {\n      leftName.textContent = "Player 1";\n      rightName.textContent = "Player 2";\n      helpText.textContent = `Take turns placing ships by clicking on the desired square.\n      Press spacebar to rotate ship. Don\'t let the other player watch while you position your fleet!`;\n      rightBoard.style.pointerEvents = "none";\n    } else if (!pvpMode) {\n      helpText.textContent = `Place your ships by clicking on the desired square.\n      Press spacebar to rotate ship.`;\n    }\n    leftBoard.style.pointerEvents = "auto";\n    modeModal.style.display = "none";\n    setupPhase = true;\n    placeCarrier = true;\n  };\n\n  /** Procede to 1-player game and close modal */\n  onePlayerButton.addEventListener("click", () => {\n    pvpMode = false;\n    closeModeModal();\n  });\n\n  /** Activate PvP and close modal */\n  twoPlayerButton.addEventListener("click", () => {\n    pvpMode = true;\n    closeModeModal();\n  });\n\n  /** Listen for spacebar to rotate ship placement */\n  document.addEventListener("keydown", (event) => {\n    if (setupPhase && event.code === "Space") {\n      placeDirection =\n        placeDirection === "horizontal" ? "vertical" : "horizontal";\n      event.preventDefault();\n    }\n  });\n\n  /** Add \'hit\' class on hit */\n  const hitSquare = (square) => {\n    square.textContent = "X";\n    square.classList.add("hit");\n  };\n\n  /** Add \'miss\' class on miss */\n  const missSquare = (square) => {\n    square.textContent = "O";\n    square.classList.add("miss");\n  };\n\n  /** Check for sunk ships after attacking, update CSS as necessary */\n  const markSunkShips = (player, board) => {\n    player.board.boardObjects.forEach((obj) => {\n      if (obj.ship.isSunk()[0] === "carrier") {\n        if (board === leftBoard) {\n          leftCarrierImage.classList.add("sunkship");\n          leftCarrierLabel.classList.add("sunklabel");\n        } else {\n          rightCarrierImage.classList.add("sunkship");\n          rightCarrierLabel.classList.add("sunklabel");\n        }\n      } else if (obj.ship.isSunk()[0] === "battleship") {\n        if (board === leftBoard) {\n          leftBattleshipImage.classList.add("sunkship");\n          leftBattleshipLabel.classList.add("sunklabel");\n        } else {\n          rightBattleshipImage.classList.add("sunkship");\n          rightBattleshipLabel.classList.add("sunklabel");\n        }\n      } else if (obj.ship.isSunk()[0] === "cruiser") {\n        if (board === leftBoard) {\n          leftCruiserImage.classList.add("sunkship");\n          leftCruiserLabel.classList.add("sunklabel");\n        } else {\n          rightCruiserImage.classList.add("sunkship");\n          rightCruiserLabel.classList.add("sunklabel");\n        }\n      } else if (obj.ship.isSunk()[0] === "submarine") {\n        if (board === leftBoard) {\n          leftSubmarineImage.classList.add("sunkship");\n          leftSubmarineLabel.classList.add("sunklabel");\n        } else {\n          rightSubmarineImage.classList.add("sunkship");\n          rightSubmarineLabel.classList.add("sunklabel");\n        }\n      } else if (obj.ship.isSunk()[0] === "destroyer") {\n        if (board === leftBoard) {\n          leftDestroyerImage.classList.add("sunkship");\n          leftDestroyerLabel.classList.add("sunklabel");\n        } else {\n          rightDestroyerImage.classList.add("sunkship");\n          rightDestroyerLabel.classList.add("sunklabel");\n        }\n      }\n    });\n  };\n\n  /** Generate board squares and attach necessary CSS selectors */\n  const fillBoard = (player, board, enemy) => {\n    for (let i = 0; i < Gameboard().gridSize + 1; i++) {\n      for (let j = 0; j < Gameboard().gridSize + 1; j++) {\n        const square = document.createElement("div");\n\n        square.setAttribute("id", `${player.name}${j}${i}`);\n        square.classList.add(`${player.name}`, "square");\n\n        if (!pvpMode) {\n          if (player.name === "player2") {\n            square.classList.add("fogofwar");\n          }\n        }\n\n        square.addEventListener("mouseover", () => {\n          hoverTarget = square;\n          let size;\n          if (setupPhase) {\n            if (placeCarrier) {\n              size = 5;\n            } else if (placeBattleship) {\n              size = 4;\n            } else if (placeCruiser || placeSubmarine) {\n              size = 3;\n            } else if (placeDestroyer) {\n              size = 2;\n            }\n            highlightRange(player, size, placeDirection, j, i);\n          }\n        });\n\n        document.addEventListener("keydown", (event) => {\n          if (setupPhase && event.code === "Space") {\n            if (hoverTarget === square) {\n              let size;\n              if (placeCarrier) {\n                size = 5;\n              } else if (placeBattleship) {\n                size = 4;\n              } else if (placeCruiser || placeSubmarine) {\n                size = 3;\n              } else if (placeDestroyer) {\n                size = 2;\n              }\n              clearHighlight(player);\n              highlightRange(player, size, placeDirection, j, i);\n            }\n          }\n        });\n\n        square.addEventListener("mouseout", () => {\n          if (setupPhase) {\n            clearHighlight(player);\n            hoverTarget = undefined;\n          }\n        });\n\n        square.addEventListener("click", () => {\n          if (setupPhase) {\n            if (placeCarrier) {\n              try {\n                placeOwnShip(player, "carrier", placeDirection, j, i);\n                stepThroughSetup();\n              } catch (error) {\n                handleError(error);\n              }\n            } else if (placeBattleship) {\n              try {\n                placeOwnShip(player, "battleship", placeDirection, j, i);\n                stepThroughSetup();\n              } catch (error) {\n                handleError(error);\n              }\n            } else if (placeCruiser) {\n              try {\n                placeOwnShip(player, "cruiser", placeDirection, j, i);\n                stepThroughSetup();\n              } catch (error) {\n                handleError(error);\n              }\n            } else if (placeSubmarine) {\n              try {\n                placeOwnShip(player, "submarine", placeDirection, j, i);\n                stepThroughSetup();\n              } catch (error) {\n                handleError(error);\n              }\n            } else if (placeDestroyer) {\n              try {\n                placeOwnShip(player, "destroyer", placeDirection, j, i);\n                if (pvpMode && playerTurn === "player1") {\n                  togglePlayerTurn();\n                } else {\n                  endSetup(pvpMode);\n                }\n              } catch (error) {\n                handleError(error);\n              }\n            }\n          } else if (battlePhase) {\n            if (enemy.attack(player.board, j, i)) {\n              hitSquare(square);\n            } else {\n              missSquare(square);\n            }\n\n            square.classList.remove("fogofwar");\n\n            markSunkShips(player, board);\n\n            if (player.board.checkAllSunk()) {\n              endGame(enemy);\n            }\n\n            togglePlayerTurn();\n          }\n        });\n\n        board.appendChild(square);\n        player.name === "player1"\n          ? playerOneSquares.push(square)\n          : playerTwoSquares.push(square);\n      }\n    }\n  };\n\n  /** Handle turn switching */\n  const togglePlayerTurn = () => {\n    if (pvpMode) {\n      if (setupPhase) {\n        concealBoard(playerOneSquares);\n        playerTwoSquares.forEach((square) =>\n          square.classList.remove("fogofwar"),\n        );\n        placeCarrier = true;\n        leftBoard.style.pointerEvents = "none";\n        rightBoard.style.pointerEvents = "auto";\n        playerTurn = "player2";\n      } else if (battlePhase) {\n        if (playerTurn === "player1") {\n          concealBoard(playerOneSquares);\n          playerTurn = "player2";\n          showInterstitial(playerTurn);\n        } else {\n          concealBoard(playerTwoSquares);\n          playerTurn = "player1";\n          showInterstitial(playerTurn);\n        }\n      }\n    } else {\n      const computerResult = player2.computerAttack(player1.board);\n      const square = document.getElementById(\n        `player1${computerResult[1]}${computerResult[2]}`,\n      );\n      if (computerResult[0]) {\n        hitSquare(square);\n      } else {\n        missSquare(square);\n      }\n      markSunkShips(player1, leftBoard);\n      if (player1.board.checkAllSunk()) {\n        endGame(player2);\n      }\n    }\n  };\n\n  /** Create two players */\n  const initializePlayers = () => {\n    player1 = Player("player1", visitedArray1);\n    player2 = Player("player2", visitedArray2);\n\n    leftName.textContent = "Player";\n    rightName.textContent = "Computer";\n  };\n\n  /** Step down through ship size for setup purposes */\n  const stepThroughSetup = () => {\n    if (placeCarrier) {\n      placeCarrier = false;\n      placeBattleship = true;\n    } else if (placeBattleship) {\n      placeBattleship = false;\n      placeCruiser = true;\n    } else if (placeCruiser) {\n      placeCruiser = false;\n      placeSubmarine = true;\n    } else if (placeSubmarine) {\n      placeSubmarine = false;\n      placeDestroyer = true;\n    } else if (placeDestroyer) {\n      placeDestroyer = false;\n    }\n  };\n\n  // Transition out of setup mode\n  const endSetup = (pvpMode) => {\n    if (pvpMode) {\n      playerTurn = "player1";\n      showInterstitial(playerTurn);\n      helpText.textContent = `Take turns firing at the other player\'s \n      board until one player sinks all of the other\'s ships.`;\n    } else {\n      placeCarrier = true;\n      placeComputerShips();\n      helpText.textContent = `Fire at the computer\'s board until one fleet\n      or the other is entirely sunk.`;\n    }\n    leftBoard.style.pointerEvents = "none";\n    setupPhase = false;\n    battlePhase = true;\n  };\n\n  // Randomly place the computer\'s fleet in valid positions\n  const placeComputerShips = () => {\n    let placingShips = true;\n\n    while (placingShips) {\n      placeDirection = Math.random() * 2 >= 1 ? "horizontal" : "vertical";\n      let x = Math.floor(Math.random() * (player2.board.gridSize + 1));\n      let y = Math.floor(Math.random() * (player2.board.gridSize + 1));\n      console.log(placeDirection, x, y);\n\n      if (placeCarrier) {\n        try {\n          placeOwnShip(player2, "carrier", placeDirection, x, y);\n          stepThroughSetup();\n        } catch (error) {\n          // Don\'t do anything on error, just try again;\n        }\n      } else if (placeBattleship) {\n        try {\n          placeOwnShip(player2, "battleship", placeDirection, x, y);\n          stepThroughSetup();\n        } catch (error) {\n          // Don\'t do anything, just try again;\n        }\n      } else if (placeCruiser) {\n        try {\n          placeOwnShip(player2, "cruiser", placeDirection, x, y);\n          stepThroughSetup();\n        } catch (error) {\n          // Don\'t do anything, just try again;\n        }\n      } else if (placeSubmarine) {\n        try {\n          placeOwnShip(player2, "submarine", placeDirection, x, y);\n          stepThroughSetup();\n        } catch (error) {\n          // Don\'t do anything, just try again;\n        }\n      } else if (placeDestroyer) {\n        try {\n          placeOwnShip(player2, "destroyer", placeDirection, x, y);\n          placingShips = false;\n        } catch (error) {\n          // Don\'t do anything, just try again;\n        }\n      }\n    }\n  };\n\n  // Intersitial screen to make 2-player possible on one screen\n  const showInterstitial = (turn) => {\n    concealBoard(playerOneSquares);\n    concealBoard(playerTwoSquares);\n    leftBoard.style.pointerEvents = "none";\n    rightBoard.style.pointerEvents = "none";\n    interstitialModal.style.display = "grid";\n    if (turn === "player1") {\n      interstitialText.textContent = `Player 1, click \'Ready\' to proceed with your turn.`;\n    } else if (turn === "player2") {\n      interstitialText.textContent = `Player 2, click \'Ready\' to proceed with your turn.`;\n    }\n  };\n\n  // Transition back from interstitial to the given player\'s turn\n  const closeInterstitial = (turn) => {\n    if (turn === "player1") {\n      playerOneSquares.forEach((square) => square.classList.remove("fogofwar"));\n      rightBoard.style.pointerEvents = "auto";\n    } else if (turn === "player2") {\n      playerTwoSquares.forEach((square) => square.classList.remove("fogofwar"));\n      leftBoard.style.pointerEvents = "auto";\n    }\n    interstitialModal.style.display = "none";\n  };\n\n  // Hide the unvisited squares of a given board\n  const concealBoard = (arr) => {\n    arr.forEach((square) => {\n      if (\n        !square.classList.contains("hit") &&\n        !square.classList.contains("miss")\n      ) {\n        square.classList.add("fogofwar");\n      }\n    });\n  };\n\n  /** Show a ghost image of a ship to review before placing it */\n  const highlightRange = (player, range, direction, x, y) => {\n    for (let i = 0; i < range; i++) {\n      if (\n        direction === "horizontal"\n          ? x + i <= player.board.gridSize\n          : y + i <= player.board.gridSize\n      ) {\n        const square =\n          direction === "horizontal"\n            ? document.getElementById(`${player.name}${x + i}${y}`)\n            : document.getElementById(`${player.name}${x}${y + i}`);\n        square.classList.add("shippreview");\n      }\n    }\n  };\n\n  /** Clear ghost image when not over an element or changing direction */\n  const clearHighlight = (player) => {\n    for (let i = 0; i <= player.board.gridSize; i++) {\n      for (let j = 0; j <= player.board.gridSize; j++) {\n        const square = document.getElementById(`${player.name}${j}${i}`);\n        square.classList.remove("shippreview");\n      }\n    }\n  };\n\n  /** Places a ship on the board and reflects this in the DOM */\n  const placeOwnShip = (player, name, direction, x, y) => {\n    let myShip = player.board.placeShip(name, direction, x, y);\n    for (let i = 0; i < myShip.ship.size; i++) {\n      const square =\n        direction === "horizontal"\n          ? document.getElementById(`${player.name}${x + i}${y}`)\n          : document.getElementById(`${player.name}${x}${y + i}`);\n      square.classList.add("ownfleet");\n    }\n  };\n\n  /** Declare winner and disable attacking behavior */\n  const endGame = (player) => {\n    let winner;\n    let loser;\n\n    if (player === player1) {\n      winner = leftName.textContent;\n      loser = rightName.textContent;\n    } else {\n      winner = rightName.textContent;\n      loser = leftName.textContent;\n    }\n    main.style.pointerEvents = "none";\n    endModal.style.pointerEvents = "auto";\n    endModal.style.display = "grid";\n    helpText.textContent = "";\n    endText.textContent = `${winner} sunk all of ${loser}\'s\n     ships. ${winner} wins!`;\n  };\n\n  // Display errors in a modal for the user\n  const handleError = (error) => {\n    errorModal.style.display = "grid";\n    errorText.textContent = error;\n  };\n\n  initializePlayers();\n\n  fillBoard(player1, leftBoard, player2);\n  fillBoard(player2, rightBoard, player1);\n};\n\nhomeLoad();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///877\n')}},__webpack_require__={};__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),(()=>{var I;__webpack_require__.g.importScripts&&(I=__webpack_require__.g.location+"");var g=__webpack_require__.g.document;if(!I&&g&&(g.currentScript&&"SCRIPT"===g.currentScript.tagName.toUpperCase()&&(I=g.currentScript.src),!I)){var e=g.getElementsByTagName("script");if(e.length)for(var n=e.length-1;n>-1&&(!I||!/^http(s?):/.test(I));)I=e[n--].src}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=I})();var __webpack_exports__={};__webpack_modules__[877](0,__webpack_exports__,__webpack_require__)})();